name: Deploy Real-time Data Pipeline Infrastructure

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  REGION: us-central1
  ENVIRONMENT: dev

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Import Existing Resources
      run: |
        echo "üîÑ Importing existing resources to prevent 409 conflicts..."
        chmod +x ./scripts/import-existing-resources.sh
        ./scripts/import-existing-resources.sh ${{ env.PROJECT_ID }} ${{ env.ENVIRONMENT }} ${{ env.REGION }}

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -out=tfplan
      env:
        TF_VAR_project_id: ${{ env.PROJECT_ID }}
        TF_VAR_environment: ${{ env.ENVIRONMENT }}

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: terraform/

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan

    - name: Assign IAM Roles
      run: |
        echo "üîê Assigning IAM roles to service accounts..."
        chmod +x ./scripts/assign-iam-roles.sh
        ./scripts/assign-iam-roles.sh ${{ env.PROJECT_ID }} ${{ env.ENVIRONMENT }}
        
        echo "‚è≥ Waiting for IAM propagation..."
        sleep 30

  deploy-cloud-function:
    name: Deploy Cloud Function
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Deploy Cloud Function
      run: |
        chmod +x ./scripts/deploy-cloud-function.sh
        ./scripts/deploy-cloud-function.sh ${{ env.PROJECT_ID }} ${{ env.ENVIRONMENT }}

    - name: Update Cloud Function via Terraform
      working-directory: ./terraform
      run: |
        terraform init
        terraform apply -auto-approve
      env:
        TF_VAR_project_id: ${{ env.PROJECT_ID }}
        TF_VAR_environment: ${{ env.ENVIRONMENT }}

  deploy-event-generator:
    name: Deploy Event Generator Service
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy Event Generator to Cloud Run
      run: |
        chmod +x ./scripts/deploy-event-generator.sh
        ./scripts/deploy-event-generator.sh ${{ env.PROJECT_ID }} ${{ env.ENVIRONMENT }} ${{ env.REGION }}

    - name: Test Event Generator Service
      run: |
        # Get service URL from terraform output or gcloud
        SERVICE_NAME="${{ env.ENVIRONMENT }}-event-generator"
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=${{ env.REGION }} --format="value(status.url)")
        
        echo "Testing Event Generator service at: $SERVICE_URL"
        
        # Test health endpoint
        curl -f "$SERVICE_URL/health" || exit 1
        
        # Test sample event generation
        curl -f "$SERVICE_URL/sample/order" || exit 1
        
        # Test scenarios endpoint
        curl -f "$SERVICE_URL/scenarios" || exit 1
        
        echo "‚úÖ Event Generator service is healthy and responding"

  build-dataflow-template:
    name: Build and Deploy Dataflow Template
    runs-on: ubuntu-latest
    needs: [terraform-apply, deploy-event-generator]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and Deploy Dataflow Template
      run: |
        chmod +x ./scripts/deploy-dataflow-template.sh
        ./scripts/deploy-dataflow-template.sh ${{ env.PROJECT_ID }} ${{ env.ENVIRONMENT }} ${{ env.REGION }}

    - name: Deploy Dataflow Job via Terraform
      working-directory: ./terraform
      run: |
        terraform init
        terraform apply -auto-approve
      env:
        TF_VAR_project_id: ${{ env.PROJECT_ID }}
        TF_VAR_environment: ${{ env.ENVIRONMENT }}

  test-pipeline:
    name: Test Data Pipeline
    runs-on: ubuntu-latest
    needs: [deploy-cloud-function, deploy-event-generator, build-dataflow-template]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Wait for Infrastructure
      run: sleep 60  # Wait for services to be fully ready

    - name: Run Integration Tests
      run: |
        chmod +x ./scripts/test-table-creation.sh
        ./scripts/test-table-creation.sh ${{ env.PROJECT_ID }} ${{ env.ENVIRONMENT }}

    - name: Verify Dataflow Job
      run: |
        JOB_NAME="${{ env.ENVIRONMENT }}-realtime-data-pipeline"
        gcloud dataflow jobs list --region=${{ env.REGION }} --filter="name:${JOB_NAME}" --format="value(id)" | head -1

    - name: Check BigQuery Tables
      run: |
        DATASET="${{ env.ENVIRONMENT }}_events_dataset"
        bq ls --project_id=${{ env.PROJECT_ID }} $DATASET

  cleanup-on-failure:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [terraform-apply, deploy-cloud-function, deploy-event-generator, build-dataflow-template, test-pipeline]
    if: failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Get Environment
      id: env
      run: |
        ENV="${{ env.ENVIRONMENT }}"
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "Detected environment: $ENV"

    - name: Initialize Terraform for Cleanup
      working-directory: ./terraform
      run: terraform init
      continue-on-error: true

    - name: Run Comprehensive Cleanup
      run: |
        chmod +x ./scripts/cleanup-all-resources.sh
        
        ENV="${{ steps.env.outputs.environment }}"
        PROJECT_ID="${{ env.PROJECT_ID }}"
        REGION="${{ env.REGION }}"
        
        echo "üßπ Starting enhanced cleanup for environment: $ENV"
        echo "üìã Project ID: $PROJECT_ID"
        echo "üìã Region: $REGION"
        echo "‚ö†Ô∏è  Note: Some permission errors are expected in CI/CD environments"
        echo ""
        
        # Run our enhanced cleanup script
        ./scripts/cleanup-all-resources.sh "$PROJECT_ID" "$ENV" "$REGION"
      continue-on-error: true

    - name: Verify Cleanup Results
      if: always()
      run: |
        ENV="${{ steps.env.outputs.environment }}"
        PROJECT_ID="${{ env.PROJECT_ID }}"
        REGION="${{ env.REGION }}"
        
        echo ""
        echo "üîç Verifying cleanup results..."
        echo "---------------------------------------------"
        
        # Check for remaining resources (non-blocking)
        echo "üìã Checking for remaining resources:"
        
        # Check Cloud Run services
        RUN_SERVICES=$(gcloud run services list --region=$REGION --format="value(metadata.name)" --filter="metadata.name:$ENV" || echo "")
        if [ -n "$RUN_SERVICES" ]; then
          echo "‚ö†Ô∏è  Remaining Cloud Run services: $RUN_SERVICES"
        else
          echo "‚úÖ No Cloud Run services found"
        fi
        
        # Check Cloud Functions
        FUNCTIONS=$(gcloud functions list --region=$REGION --format="value(name)" --filter="name:$ENV" || echo "")
        if [ -n "$FUNCTIONS" ]; then
          echo "‚ö†Ô∏è  Remaining Cloud Functions: $FUNCTIONS"
        else
          echo "‚úÖ No Cloud Functions found"
        fi
        
        # Check Pub/Sub topics
        TOPICS=$(gcloud pubsub topics list --format="value(name)" --filter="name:$ENV" || echo "")
        if [ -n "$TOPICS" ]; then
          echo "‚ö†Ô∏è  Remaining Pub/Sub topics: $TOPICS"
        else
          echo "‚úÖ No Pub/Sub topics found"
        fi
        
        # Check Storage buckets
        BUCKETS=$(gsutil ls -p $PROJECT_ID | grep -E "$ENV|terraform-state" | head -5 || echo "")
        if [ -n "$BUCKETS" ]; then
          echo "‚ö†Ô∏è  Remaining Storage buckets:"
          echo "$BUCKETS" | head -3
        else
          echo "‚úÖ No Storage buckets found"
        fi
        
        echo ""
        echo "üìä Cleanup Summary:"
        echo "  ‚úÖ Enhanced cleanup script executed"
        echo "  ‚úÖ Resource existence checks performed"
        echo "  ‚úÖ Permission errors handled gracefully"
        echo "  üìã Manual verification completed above"
        echo ""
        echo "üí° Next steps:"
        echo "  1. Check GCP Console for any remaining resources"
        echo "  2. Service accounts may need manual deletion with elevated permissions"
        echo "  3. Verify billing to ensure all resources are stopped"
      continue-on-error: true 